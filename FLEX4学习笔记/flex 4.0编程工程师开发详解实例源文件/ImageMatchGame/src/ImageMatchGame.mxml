<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:comp="demo.game.comp.*"
			   minWidth="800" minHeight="600"
			   creationComplete="creationCompleteHandler(event)" xmlns:util="demo.game.util.*">
	<fx:Declarations>
		<!-- 用来消除图片时的动态效果，持续200ms，从原始状态缩小到0 -->
		<s:Resize id="resize"
				  duration="200"
				  widthTo="0" heightTo="0"
				  effectEnd="container.graphics.clear();"
				  />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import assets.Res;
			
			import demo.game.event.MatchingEvent;
			import demo.game.util.LinkPath;
			import demo.game.util.Random;
			
			import mx.controls.Image;
			import mx.events.FlexEvent;
			
			[Bindable]
			private var columnNumber : int = 10; //列数
			[Bindable]
			private var rowNumber : int = 7; //行数
			
			private var linkPath : LinkPath = new LinkPath();//路径查找器
			private var pathVector : Array = []; //路径向量
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				//markDisplay.mark = 10;
				//markDisplay.lable.text = 10 + '';
				
				for (var i: int = 0, pic:Image; i < 12; i++)
					for(var j:int = 0;j<6;j++){
						pic = new Image();
						pic.source = Res.imgs[i];
						container.addImage(pic);
					}
				
				randomElements();
				container.addEventListener(MatchingEvent.PIC_MATCHING_FOUND, disposeImage);
				
				initPathVector();
				linkPath.pathVector = pathVector;
			}
			
			/**
			 * 初始化向量
			 */
			private function initPathVector():void{
				for(var i:int = 0;i < columnNumber; i++){
					pathVector[i] = [];
					for(var j:int = 0;j < rowNumber; j++){
						pathVector[i][j] = 1;
					}
				}
			}
			
			/**
			 * 消除图片
			 */
			private function disposeImage(event:MatchingEvent):void{
				var images:Array = event.matchImages;
				
				var pointArray:Array = linkPath.find(
							container.getImagePoint(images[0]),
							container.getImagePoint(images[1])
							);
				
				if(pointArray.length > 0){
					//修改向量路径
					for(var i:int = 0, point : Point; i < images.length; i++){
						point = container.getImagePoint(images[i]);
						pathVector[point.x][point.y] = 0;
					}
					
					for(i = 0; i < pointArray.length; i++){
						pointArray[i] = container.pointToPixel(pointArray[i]);
					}
					
					drawLinkLine(pointArray, 5, 0xff0000);
					
					resize.play(event.matchImages);
					markDisplay.mark += 10;
				}
			}
			
			/**
			 * 绘制给定点的连线
			 */
			private function drawLinkLine(pointArray:Array, thickness:Number, color:uint):Boolean{
				if(pointArray.length < 1)
					return false;
				var g:Graphics = container.graphics;
				g.lineStyle(thickness, color);
				g.moveTo(pointArray[0].x, pointArray[0].y);
				
				for(var i:int = 0; i < pointArray.length; i++){
					g.lineTo(pointArray[i].x, pointArray[i].y);
				}
				
				return true;
			}
			
			/**
			 * 打乱容器内的组件索引顺序
			 */
			public function randomElements():void{
				Random.randomElements(container);
			}

		]]>
	</fx:Script>
	<comp:MarkDisplay id="markDisplay" x="10" y="10">
	</comp:MarkDisplay>
	<s:Button label="按钮" right="30" top="10" height="50" width="120" fontSize="36" click="randomElements()"/>
	<s:Group right="10" left="10" top="70" bottom="10">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center"/>
		</s:layout>
		<comp:MatchingImageContainer id="container"
									 columnNumber="{columnNumber}"
									 rowNumber="{rowNumber}">
		</comp:MatchingImageContainer>
	</s:Group>
</s:Application>
