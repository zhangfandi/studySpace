--DROP PROCEDURE DCCELL.P_BIG_CANOPY;
CREATE PROCEDURE DCCELL.P_BIG_CANOPY   
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  MODIFIES SQL DATA
  INHERIT SPECIAL REGISTERS
  BEGIN
   DECLARE V_YEAR             DECIMAL(4);
   ------------------------------------------------------------
  -- 指针修改例如：
  -- CREATE ALIAS R_BIG_CANOPY  FOR R_BIG_CANOPY_Y16;
  -- CREATE ALIAS B_ORG FOR B_ORG_Y16; 
  -- CREATE ALIAS B_DIVISION FOR B_DIVISION_Y16; 
  ------------------------------------------------------------

   SELECT BUSI_YEAR INTO V_YEAR
   FROM DC_PROC_BUSI_YEAR A
   WHERE A.PROC_NAME = 'P_BIG_CANOPY'
  ;

  DELETE FROM R_BIG_CANOPY;
  COMMIT;
    
  MERGE INTO R_BIG_CANOPY A
  USING(
    SELECT  
        C.BIG_CANOPY_ID AS BIG_CANOPY_ID,    
        C.BIG_CANOPY_CD AS BIG_CANOPY_CD,
        C.BIG_CANOPY_TYPE_CD AS BIG_CANOPY_TYPE,
        C.BUILD_YEAR AS BUILD_YEAR,
        cast(NULL as varchar(32)) AS FACILITY_STATE,        
        C.ORG_UNIQUE_CD AS ORG_UNIQUE_CD,
        cast(NULL as varchar(32)) AS DIVISION_UNIQUE_CD,
        '0' AS SEND_STATE,
        '1' AS DATA_STATE
    FROM TP_BIG_CANOPY C
    WHERE C.DATA_STATE = '1'
      AND C.USE_TYPE = 'PT'
      AND C.BIG_CANOPY_TYPE_CD IN ('BIG_CANOPY'
                   ,'MID_CANOPY'
                   ,'SMALL_CANOPY'
                   ,'S_MOVE_CANOPY'
                   ,'S_TEMP_CANOPY')
    --AND CASE(C.BUILD_DATE AS DECIMAL(4)) = V_YEAR
    ) B ON (A.BIG_CANOPY_ID=B.BIG_CANOPY_ID  )
   WHEN MATCHED THEN
    UPDATE SET          
       A.BIG_CANOPY_CD = B.BIG_CANOPY_CD,
       A.BIG_CANOPY_TYPE = B.BIG_CANOPY_TYPE,          
       A.BUILD_YEAR = B.BUILD_YEAR,        
       A.FACILITY_STATE = B.FACILITY_STATE,
       A.ORG_UNIQUE_CD = B.ORG_UNIQUE_CD,
       A.DIVISION_UNIQUE_CD = B.DIVISION_UNIQUE_CD,
       A.SEND_STATE = B.SEND_STATE,
       A.DATA_STATE = B.DATA_STATE        
   WHEN NOT MATCHED THEN
    INSERT
    (
        A.BIG_CANOPY_ID,
        A.BIG_CANOPY_CD,
        A.BIG_CANOPY_TYPE,
        A.BUILD_YEAR,
        A.FACILITY_STATE,   
        A.ORG_UNIQUE_CD,
        A.DIVISION_UNIQUE_CD,
        A.SEND_STATE,
        A.DATA_STATE        
    )
    VALUES
    (
        B.BIG_CANOPY_ID,
        B.BIG_CANOPY_CD,
        B.BIG_CANOPY_TYPE,
        B.BUILD_YEAR,
        B.FACILITY_STATE,            
        B.ORG_UNIQUE_CD,
        B.DIVISION_UNIQUE_CD,
        B.SEND_STATE,
        B.DATA_STATE            
    );
    COMMIT;

    
    MERGE INTO R_BIG_CANOPY A
    USING
    (
    SELECT CASE WHEN B.PROV = '0' THEN NULL ELSE B.PROV END AS PROV,
       CASE WHEN B.CITC = '0' THEN NULL ELSE B.CITC END AS CITC,
       CASE WHEN B.COUC = '0' THEN NULL ELSE B.COUC END AS COUC,
       CASE WHEN B.STAC = '0' THEN NULL ELSE B.STAC END AS STAC,
       CASE WHEN B.SSTC = '0' THEN NULL ELSE B.SSTC END AS SSTC,
       CASE WHEN B.SLIN = '0' THEN NULL ELSE B.SLIN END AS SLIN,
       B.PROV_NAME,
       B.CITC_NAME,
       B.COUC_NAME,
       B.STAC_NAME,
       B.SSTC_NAME,
       B.SLIN_NAME,
       B.ORG_CD,
       B.ORG_NAME,
       B.ORG_UNIQUE_CD
    FROM B_ORG B
    WHERE B.ORG_TYPE = '2'
    ) B
    ON (B.ORG_UNIQUE_CD = A.ORG_UNIQUE_CD AND A.DATA_STATE = '1') 
    WHEN MATCHED THEN
    UPDATE SET
       A.PROV       = B.PROV      ,
       A.CITC       = B.CITC      ,
       A.COUC       = B.COUC      ,
       A.STAC       = B.STAC      ,
       A.SSTC       = B.SSTC      ,
       A.SLIN       = B.SLIN      ,
       A.PROV_NAME  = B.PROV_NAME ,
       A.CITC_NAME  = B.CITC_NAME ,
       A.COUC_NAME  = B.COUC_NAME ,
       A.STAC_NAME  = B.STAC_NAME ,
       A.SSTC_NAME  = B.SSTC_NAME ,
       A.SLIN_NAME  = B.SLIN_NAME ,
       A.ORG_NAME   = B.ORG_NAME   
    ;
    COMMIT;

    MERGE INTO R_BIG_CANOPY A
    USING
    (
    SELECT CASE WHEN B.AREA_PROV = '0' THEN NULL ELSE B.AREA_PROV END AS AREA_PROV,
       CASE WHEN B.AREA_CITC = '0' THEN NULL ELSE B.AREA_CITC END AS AREA_CITC,
       CASE WHEN B.AREA_COUC = '0' THEN NULL ELSE B.AREA_COUC END AS AREA_COUC,
       CASE WHEN B.AREA_TOWN = '0' THEN NULL ELSE B.AREA_TOWN END AS AREA_TOWN,
       CASE WHEN B.AREA_VAGE = '0' THEN NULL ELSE B.AREA_VAGE END AS AREA_VAGE,
       CASE WHEN B.AREA_GRUP = '0' THEN NULL ELSE B.AREA_GRUP END AS AREA_GRUP,
       B.AREA_PROV_NAME,
       B.AREA_CITC_NAME,
       B.AREA_COUC_NAME,
       B.TOWN_NAME,
       B.VAGE_NAME,
       B.GRUP_NAME,
       B.ORG_CD,
       B.ORG_NAME,
       B.DIVISION_UNIQUE_CD
    FROM B_DIVISION B
    ) B
    ON (B.DIVISION_UNIQUE_CD = A.DIVISION_UNIQUE_CD AND A.DATA_STATE = '1') 
    WHEN MATCHED THEN
    UPDATE SET
       A.AREA_PROV      = B.AREA_PROV     ,
       A.AREA_CITC      = B.AREA_CITC     ,
       A.AREA_COUC      = B.AREA_COUC     ,
       A.AREA_TOWN      = B.AREA_TOWN     ,
       A.AREA_VAGE      = B.AREA_VAGE     ,
       A.AREA_GRUP      = B.AREA_GRUP     ,
       A.AREA_PROV_NAME = B.AREA_PROV_NAME,
       A.AREA_CITC_NAME = B.AREA_CITC_NAME,
       A.AREA_COUC_NAME = B.AREA_COUC_NAME,
       A.TOWN_NAME      = B.TOWN_NAME     ,
       A.VAGE_NAME      = B.VAGE_NAME     ,
       A.GRUP_NAME      = B.GRUP_NAME     ,
       A.DIVISION_NAME  = B.ORG_NAME       
    ;
    COMMIT;

END;
@