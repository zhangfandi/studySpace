--DROP PROCEDURE DCCELL.P_R_PT_DT_FM_D;
CREATE PROCEDURE DCCELL.P_R_PT_DT_FM_D   
  LANGUAGE SQL
  NOT DETERMINISTIC
  CALLED ON NULL INPUT
  EXTERNAL ACTION
  OLD SAVEPOINT LEVEL
  MODIFIES SQL DATA
  INHERIT SPECIAL REGISTERS
  --PT_6.4田间卫生_加工存储过程，包括组织和行政表，以增量方式进行
--大田管理与田间卫生共用R_PT_DT_FM_D加工表，此存储过程一并处理
BEGIN
  DECLARE V_PROC_NAME               VARCHAR(1000) DEFAULT 'P_R_PT_DT_FM_D';
  DECLARE V_STEP                    VARCHAR(500);
  DECLARE V_PT_YEAR                 INTEGER DEFAULT 2016;
  DECLARE V_BILL_NO                 VARCHAR(64) DEFAULT 'TJ00000000000060';
  DECLARE V_BILL_NO_61              VARCHAR(64) DEFAULT 'TJ00000000000061';

  DECLARE V_CURRENTTIMESTAMP       TIMESTAMP;
  
  DECLARE V_LOG_GROUP           VARCHAR(32);
  DECLARE V_LAST_STEP           VARCHAR(32);
  DECLARE V_LOG                 VARCHAR(32);


  SET V_CURRENTTIMESTAMP = CURRENT TIMESTAMP;
  SET V_LOG = ' ';
  SET V_LOG_GROUP = TO_CHAR(V_CURRENTTIMESTAMP,'YYYY-MM-DD HH24:MI:SS');

  SELECT BUSI_YEAR INTO V_PT_YEAR 
    FROM DC_PROC_BUSI_YEAR A 
   WHERE A.PROC_NAME = 'P_DC_CALL_ID_02_SC'
  ;

  SET V_STEP = '1.R_PT_DT_FM_D-D';
  CALL P_DEBUG_LOG(V_LOG_GROUP,V_PROC_NAME,V_PROC_NAME,V_STEP,TO_CHAR(CURRENT TIMESTAMP,'YYYY-MM-DD HH24:MI:SS')||V_LOG);
  DELETE FROM R_PT_DT_FM_D T
   WHERE BUSINESS_YEAR >= V_PT_YEAR
  ;

  SET V_STEP = '2.R_PT_DT_FM_D-I';
  CALL P_DEBUG_LOG(V_LOG_GROUP,V_PROC_NAME,V_PROC_NAME,V_STEP,TO_CHAR(CURRENT TIMESTAMP,'YYYY-MM-DD HH24:MI:SS')||V_LOG);
  INSERT INTO R_PT_DT_FM_D
  (
      DT_FM_D_ID,
      FIELD_BLOCK_ID,
      FIELD_BLOCK_CD,
      FIELD_BLOCK_NAME,
      BUSINESS_YEAR,
      BUSINESS_DATE,
      UNCOVER_AREA,
      UNCOVER_ROOFED_AREA,
      BUTTON_POLE_AREA,
      BUTTON_POLE_ROOFED_AREA,
      DEBRIS_CLEAN_AREA,
      DEBRIS_CLEAN_ROOFED_AREA,
      MANURE_AREA,
      MANURE_ROOFED_AREA,
      PTSX_AREA,
      PTSX_ROOFED_AREA,
      PREVENT_AREA,
      PREVENT_ROOFED_AREA,
      FARMER_ID,
      FARMER_CD,
      FARMER_NAME,
      ORG_CD,
      AREA_CD,
      TECHNICIAN_ID,
      SEND_STATE,
      DATA_STATE,
      MODIFY_TIME,
      LAST_TIME
  )
  SELECT DT_FM_D_ID,
         FIELD_BLOCK_ID,
         FIELD_BLOCK_CD,
         FIELD_BLOCK_NAME,
         BUSINESS_YEAR,
         BUSINESS_DATE,
         UNCOVER_AREA,
         UNCOVER_ROOFED_AREA,
         BUTTON_POLE_AREA,
         BUTTON_POLE_ROOFED_AREA,
         DEBRIS_CLEAN_AREA,
         DEBRIS_CLEAN_ROOFED_AREA,
         MANURE_AREA,
         MANURE_ROOFED_AREA,
         PTSX_AREA,
         PTSX_ROOFED_AREA,
         PREVENT_AREA,
         PREVENT_ROOFED_AREA,
         FARMER_ID,
         FARMER_CD,
         FARMER_NAME,
         ORG_CD,
         AREA_CD,
         TECHNICIAN_ID,
         SEND_STATE,
         DATA_STATE,
         MODIFY_TIME,
         CURRENT TIMESTAMP AS LAST_TIME
    FROM V_PT_DT_FM_D
   WHERE DATA_STATE = '1'
     AND BUSINESS_YEAR >= V_PT_YEAR
  ;

  UPDATE R_PT_DT_FM_D A
     SET (
           PROV      ,
           CITC      ,
           COUC      ,
           STAC      ,
           SSTC      ,
           SLIN      ,
           PROV_NAME ,
           CITC_NAME ,
           COUC_NAME ,
           STAC_NAME ,
           SSTC_NAME ,
           SLIN_NAME ,
           AREA_PROV     ,
           AREA_CITC     ,
           AREA_COUC     ,
           AREA_TOWN     ,
           AREA_VAGE     ,
           AREA_GRUP     ,
           AREA_PROV_NAME,
           AREA_CITC_NAME,
           AREA_COUC_NAME,
           TOWN_NAME     ,
           VAGE_NAME     ,
           GRUP_NAME     ,
           AREA_NAME     
         )=
         (select  PROV      ,
               CITC      ,
               COUC      ,
               STAC      ,
               SSTC      ,
               SLIN      ,
               PROV_NAME ,
               CITC_NAME ,
               COUC_NAME ,
               STAC_NAME ,
               SSTC_NAME ,
               SLIN_NAME ,
               AREA_PROV     ,
               AREA_CITC     ,
               AREA_COUC     ,
               AREA_TOWN     ,
               AREA_VAGE     ,
               AREA_GRUP     ,
               AREA_PROV_NAME,
               AREA_CITC_NAME,
               AREA_COUC_NAME,
               TOWN_NAME     ,
               VAGE_NAME     ,
               GRUP_NAME     ,
               AREA_NAME     
          from R_FARMER B where A.FARMER_CD = B.FARMER_CD)
   where EXISTS
         (select 1 from R_FARMER B where A.FARMER_CD = B.FARMER_CD)
     AND A.BUSINESS_YEAR >= V_PT_YEAR
  ;
  COMMIT;

  SET V_STEP = '3.R_PT_DT_FM_D-U';
  CALL P_DEBUG_LOG(V_LOG_GROUP,V_PROC_NAME,V_PROC_NAME,V_STEP,TO_CHAR(CURRENT TIMESTAMP,'YYYY-MM-DD HH24:MI:SS')||V_LOG);
  UPDATE R_PT_DT_FM_D A
     SET TECHNICIAN_NAME  = (SELECT TECHNICIAN_NAME FROM R_TECHNICIAN B WHERE A.TECHNICIAN_ID = B.TECHNICIAN_ID)
   WHERE EXISTS
         (SELECT 1 FROM R_TECHNICIAN B WHERE A.TECHNICIAN_ID = B.TECHNICIAN_ID)
     AND A.BUSINESS_YEAR >= V_PT_YEAR
  ;
  COMMIT;

 call P_DEBUG_LOG(V_LOG_GROUP,V_PROC_NAME,V_PROC_NAME,'ORG',TO_CHAR(CURRENT TIMESTAMP,'YYYY-MM-DD HH24:MI:SS')||V_LOG);
 MERGE INTO R_PT_DT_FM_D A
 USING
 (
   SELECT CASE WHEN B.PROV = '0' THEN NULL ELSE B.PROV END AS PROV,
          CASE WHEN B.CITC = '0' THEN NULL ELSE B.CITC END AS CITC,
          CASE WHEN B.COUC = '0' THEN NULL ELSE B.COUC END AS COUC,
          CASE WHEN B.STAC = '0' THEN NULL ELSE B.STAC END AS STAC,
          CASE WHEN B.SSTC = '0' THEN NULL ELSE B.SSTC END AS SSTC,
          CASE WHEN B.SLIN = '0' THEN NULL ELSE B.SLIN END AS SLIN,
          B.PROV_NAME,
          B.CITC_NAME,
          B.COUC_NAME,
          B.STAC_NAME,
          B.SSTC_NAME,
          B.SLIN_NAME, 
          B.ORG_UNIQUE_CD,
          B.ORG_NAME
     FROM B_ORG B
    WHERE B.ORG_TYPE = '2'
 ) B
 ON (B.ORG_UNIQUE_CD = A.ORG_CD AND A.DATA_STATE = '1'  AND A.BUSINESS_YEAR >= V_PT_YEAR AND (A.PROV IS NULL OR A.PROV_NAME IS NULL)) 
 WHEN MATCHED THEN
   UPDATE SET
          A.PROV       = B.PROV      ,
          A.CITC       = B.CITC      ,
          A.COUC       = B.COUC      ,
          A.STAC       = B.STAC      ,
          A.SSTC       = B.SSTC      ,
          A.SLIN       = B.SLIN      ,
          A.PROV_NAME  = B.PROV_NAME ,
          A.CITC_NAME  = B.CITC_NAME ,
          A.COUC_NAME  = B.COUC_NAME ,
          A.STAC_NAME  = B.STAC_NAME ,
          A.SSTC_NAME  = B.SSTC_NAME ,
          A.SLIN_NAME  = B.SLIN_NAME ,
          A.ORG_NAME   = B.ORG_NAME   
 ;
 COMMIT;
 call P_DEBUG_LOG(V_LOG_GROUP,V_PROC_NAME,V_PROC_NAME,'DIV',TO_CHAR(CURRENT TIMESTAMP,'YYYY-MM-DD HH24:MI:SS')||V_LOG);
 MERGE INTO R_PT_DT_FM_D A
 USING
 (
   SELECT CASE WHEN B.AREA_PROV = '0' THEN NULL ELSE B.AREA_PROV END AS AREA_PROV,
          CASE WHEN B.AREA_CITC = '0' THEN NULL ELSE B.AREA_CITC END AS AREA_CITC,
          CASE WHEN B.AREA_COUC = '0' THEN NULL ELSE B.AREA_COUC END AS AREA_COUC,
          CASE WHEN B.AREA_TOWN = '0' THEN NULL ELSE B.AREA_TOWN END AS AREA_TOWN,
          CASE WHEN B.AREA_VAGE = '0' THEN NULL ELSE B.AREA_VAGE END AS AREA_VAGE,
          CASE WHEN B.AREA_GRUP = '0' THEN NULL ELSE B.AREA_GRUP END AS AREA_GRUP,
          B.AREA_PROV_NAME,
          B.AREA_CITC_NAME,
          B.AREA_COUC_NAME,
          B.TOWN_NAME,
          B.VAGE_NAME,
          B.GRUP_NAME, 
          B.DIVISION_UNIQUE_CD,
          B.ORG_NAME
     FROM B_DIVISION B
 ) B
 ON (B.DIVISION_UNIQUE_CD = A.AREA_CD AND A.DATA_STATE = '1' AND A.BUSINESS_YEAR >= V_PT_YEAR AND (A.AREA_PROV IS NULL OR A.AREA_PROV_NAME IS NULL)) 
 WHEN MATCHED THEN
   UPDATE SET
          A.AREA_PROV      = B.AREA_PROV     ,
          A.AREA_CITC      = B.AREA_CITC     ,
          A.AREA_COUC      = B.AREA_COUC     ,
          A.AREA_TOWN      = B.AREA_TOWN     ,
          A.AREA_VAGE      = B.AREA_VAGE     ,
          A.AREA_GRUP      = B.AREA_GRUP     ,
          A.AREA_PROV_NAME = B.AREA_PROV_NAME,
          A.AREA_CITC_NAME = B.AREA_CITC_NAME,
          A.AREA_COUC_NAME = B.AREA_COUC_NAME,
          A.TOWN_NAME      = B.TOWN_NAME     ,
          A.VAGE_NAME      = B.VAGE_NAME     ,
          A.GRUP_NAME      = B.GRUP_NAME     ,
          A.AREA_NAME      = B.ORG_NAME       
 ;
  COMMIT;
  
  SET V_STEP = '7、R_PT_DT_DV_D-D';
  call P_DEBUG_LOG(V_LOG_GROUP,V_PROC_NAME,V_PROC_NAME,V_STEP,TO_CHAR(CURRENT TIMESTAMP,'YYYY-MM-DD HH24:MI:SS')||V_LOG);
  DELETE FROM R_PT_DT_DV_D T
   WHERE T.BUSINESS_YEAR >= V_PT_YEAR
  ;

  SET V_STEP = '8、R_PT_DT_DV_D-I';
  call P_DEBUG_LOG(V_LOG_GROUP,V_PROC_NAME,V_PROC_NAME,V_STEP,TO_CHAR(CURRENT TIMESTAMP,'YYYY-MM-DD HH24:MI:SS')||V_LOG);
  INSERT INTO R_PT_DT_DV_D
  (
      DT_DV_D_ID,
      BUSINESS_YEAR,
      BUSINESS_DATE,
      UNCOVER_AREA,
      UNCOVER_ROOFED_AREA,
      BUTTON_POLE_AREA,
      BUTTON_POLE_ROOFED_AREA,
      DEBRIS_CLEAN_AREA,
      DEBRIS_CLEAN_ROOFED_AREA,
      MANURE_AREA,
      MANURE_ROOFED_AREA,
      PTSX_AREA,
      PTSX_ROOFED_AREA,
      PREVENT_AREA,
      PREVENT_ROOFED_AREA,
      ORG_CD,
      ORG_NAME,
      PROV,
      PROV_NAME,
      CITC,
      CITC_NAME,
      COUC,
      COUC_NAME,
      STAC,
      STAC_NAME,
      SSTC,
      SSTC_NAME,
      AREA_CD,
      AREA_NAME,
      AREA_PROV,
      AREA_PROV_NAME,
      AREA_CITC,
      AREA_CITC_NAME,
      AREA_COUC,
      AREA_COUC_NAME,
      AREA_TOWN,
      TOWN_NAME,
      AREA_VAGE,
      VAGE_NAME,
      AREA_GRUP,
      GRUP_NAME,
      SEND_STATE,
      DATA_STATE,
      MODIFY_TIME,
      LAST_TIME
  )
  SELECT HEX(GENERATE_UNIQUE()) AS DT_DV_D_ID,
         BUSINESS_YEAR,
         BUSINESS_DATE,
         SUM(UNCOVER_AREA) AS UNCOVER_AREA,
         SUM(UNCOVER_ROOFED_AREA) AS UNCOVER_ROOFED_AREA,
         SUM(BUTTON_POLE_AREA) AS BUTTON_POLE_AREA,
         SUM(BUTTON_POLE_ROOFED_AREA) AS BUTTON_POLE_ROOFED_AREA,
         SUM(DEBRIS_CLEAN_AREA) AS DEBRIS_CLEAN_AREA,
         SUM(DEBRIS_CLEAN_ROOFED_AREA) AS DEBRIS_CLEAN_ROOFED_AREA,
         SUM(MANURE_AREA) AS MANURE_AREA,
         SUM(MANURE_ROOFED_AREA) AS MANURE_ROOFED_AREA,
         SUM(PTSX_AREA) AS PTSX_AREA,
         SUM(PTSX_ROOFED_AREA) AS PTSX_ROOFED_AREA,
         SUM(PREVENT_AREA) AS PREVENT_AREA,
         SUM(PREVENT_ROOFED_AREA) AS PREVENT_ROOFED_AREA,
         ORG_CD,
         ORG_NAME,
         PROV,
         PROV_NAME,
         CITC,
         CITC_NAME,
         COUC,
         COUC_NAME,
         STAC,
         STAC_NAME,
         SSTC,
         SSTC_NAME,
         AREA_CD,
         AREA_NAME,
         AREA_PROV,
         AREA_PROV_NAME,
         AREA_CITC,
         AREA_CITC_NAME,
         AREA_COUC,
         AREA_COUC_NAME,
         AREA_TOWN,
         TOWN_NAME,
         AREA_VAGE,
         VAGE_NAME,
         AREA_GRUP,
         GRUP_NAME,
         '0',
         '1',
         MAX(MODIFY_TIME),
         V_CURRENTTIMESTAMP
    FROM R_PT_DT_FM_D T
   WHERE T.BUSINESS_YEAR >= V_PT_YEAR
   GROUP BY
         T.BUSINESS_YEAR,
         T.BUSINESS_DATE,
         T.ORG_CD,
         T.ORG_NAME,
         T.PROV,
         T.PROV_NAME,
         T.CITC,
         T.CITC_NAME,
         T.COUC,
         T.COUC_NAME,
         T.STAC,
         T.STAC_NAME,
         T.SSTC,
         T.SSTC_NAME,
         T.AREA_CD,
         T.AREA_NAME,
         T.AREA_PROV,
         T.AREA_PROV_NAME,
         T.AREA_CITC,
         T.AREA_CITC_NAME,
         T.AREA_COUC,
         T.AREA_COUC_NAME,
         T.AREA_TOWN,
         T.TOWN_NAME,
         T.AREA_VAGE,
         T.VAGE_NAME,
         T.AREA_GRUP,
         T.GRUP_NAME
  ;

  SET V_STEP = '9、R_PT_DT_CB_D-D';
  call P_DEBUG_LOG(V_LOG_GROUP,V_PROC_NAME,V_PROC_NAME,V_STEP,TO_CHAR(CURRENT TIMESTAMP,'YYYY-MM-DD HH24:MI:SS')||V_LOG);
  DELETE FROM R_PT_DT_CB_D T
   WHERE T.BUSINESS_YEAR >= V_PT_YEAR
  ;

  SET V_STEP = '10、R_PT_DT_CB_D-I';
  call P_DEBUG_LOG(V_LOG_GROUP,V_PROC_NAME,V_PROC_NAME,V_STEP,TO_CHAR(CURRENT TIMESTAMP,'YYYY-MM-DD HH24:MI:SS')||V_LOG);
  INSERT INTO R_PT_DT_CB_D
  (
      DT_CB_D_ID,
      BUSINESS_YEAR,
      BUSINESS_DATE,
      UNCOVER_AREA,
      UNCOVER_ROOFED_AREA,
      BUTTON_POLE_AREA,
      BUTTON_POLE_ROOFED_AREA,
      DEBRIS_CLEAN_AREA,
      DEBRIS_CLEAN_ROOFED_AREA,
      MANURE_AREA,
      MANURE_ROOFED_AREA,
      PTSX_AREA,
      PTSX_ROOFED_AREA,
      PREVENT_AREA,
      PREVENT_ROOFED_AREA,
      ORG_CD,
      ORG_NAME,
      PROV,
      PROV_NAME,
      CITC,
      CITC_NAME,
      COUC,
      COUC_NAME,
      STAC,
      STAC_NAME,
      SSTC,
      SSTC_NAME,
      SEND_STATE,
      DATA_STATE,
      MODIFY_TIME,
      LAST_TIME
  )
  SELECT HEX(GENERATE_UNIQUE()) AS DT_CB_D_ID,
         BUSINESS_YEAR,
         BUSINESS_DATE,
         SUM(UNCOVER_AREA) AS UNCOVER_AREA,
         SUM(UNCOVER_ROOFED_AREA) AS UNCOVER_ROOFED_AREA,
         SUM(BUTTON_POLE_AREA) AS BUTTON_POLE_AREA,
         SUM(BUTTON_POLE_ROOFED_AREA) AS BUTTON_POLE_ROOFED_AREA,
         SUM(DEBRIS_CLEAN_AREA) AS DEBRIS_CLEAN_AREA,
         SUM(DEBRIS_CLEAN_ROOFED_AREA) AS DEBRIS_CLEAN_ROOFED_AREA,
         SUM(MANURE_AREA) AS MANURE_AREA,
         SUM(MANURE_ROOFED_AREA) AS MANURE_ROOFED_AREA,
         SUM(PTSX_AREA) AS PTSX_AREA,
         SUM(PTSX_ROOFED_AREA) AS PTSX_ROOFED_AREA,
         SUM(PREVENT_AREA) AS PREVENT_AREA,
         SUM(PREVENT_ROOFED_AREA) AS PREVENT_ROOFED_AREA,
         ORG_CD,
         ORG_NAME,
         PROV,
         PROV_NAME,
         CITC,
         CITC_NAME,
         COUC,
         COUC_NAME,
         STAC,
         STAC_NAME,
         SSTC,
         SSTC_NAME,
         '0' AS SEND_STATE,
         '1' AS DATA_STATE,
         MAX(MODIFY_TIME),
         V_CURRENTTIMESTAMP
    FROM R_PT_DT_DV_D T
   WHERE T.BUSINESS_YEAR >= V_PT_YEAR
   GROUP BY
         T.BUSINESS_YEAR,
         T.BUSINESS_DATE,
         T.ORG_CD,
         T.ORG_NAME,
         T.PROV,
         T.PROV_NAME,
         T.CITC,
         T.CITC_NAME,
         T.COUC,
         T.COUC_NAME,
         T.STAC,
         T.STAC_NAME,
         T.SSTC,
         T.SSTC_NAME
  ;
  COMMIT;

END
@
