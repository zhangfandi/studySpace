--DROP PROCEDURE DCCELL.P_R_PT_DT_FM_D;
CREATE PROCEDURE DCCELL.P_R_PT_DT_FM_D
--PT_6.4田间卫生_加工存储过程，包括组织和行政表，以增量方式进行
--大田管理与田间卫生共用R_PT_DT_FM_D加工表，此存储过程一并处理
BEGIN

  DECLARE V_STEP VARCHAR(500);
  DECLARE V_PT_YEAR          INTEGER DEFAULT 2016;
  DECLARE V_BILL_NO VARCHAR(64) DEFAULT 'TJ00000000000060'; --田间卫生单据编号
  DECLARE V_BILL_NO_61 VARCHAR(64) DEFAULT 'TJ00000000000061'; --大田管理单据编号
  DECLARE   V_TIMESTAMP_STOP          TIMESTAMP;
  DECLARE    V_TIMESTAMP_CURRENT      TIMESTAMP;
  DECLARE D_PROC_NAME VARCHAR(1000) DEFAULT 'P_R_PT_DT_FM_D';
  SET V_TIMESTAMP_CURRENT = CURRENT TIMESTAMP;

  SET V_STEP = '1、取系统当前时间、存储过程上次加工时间';
  SELECT TIME_STOP INTO V_TIMESTAMP_STOP FROM DCCELL.DC_PROC_TIME_STOP WHERE PROC_NAME=D_PROC_NAME;
  SELECT BUSI_YEAR INTO V_PT_YEAR FROM DC_PROC_BUSI_YEAR A WHERE A.PROC_NAME = 'P_DC_CALL_ID_02_SC';

  SET V_STEP = '2、创建临时表，将MODIFY_TIME大于上次加工时间的数据，所涉及的组织和行政查询出来';
  ----定义临时表
  DECLARE GLOBAL TEMPORARY TABLE SESSION.ORG_TEMP
  (
      ORG_CD VARCHAR(32)
  )ON COMMIT DELETE ROWS WITH REPLACE NOT LOGGED;

  SET V_STEP = '3、将有修改过的数据涉及到的组织和行政，记录到临时表当中';
  insert into session.ORG_TEMP
  (select FARMER.ORG_CD from PT_DC_STAT_DATA_H DATA_TAB   --需要加工的数据的组织，即新的组织
  LEFT JOIN R_FARMER_ALL FARMER ON FARMER.FARMER_ID = DATA_TAB.RELA_OBJECT_ID AND FARMER.BUSINESS_YEAR = DATA_TAB.PT_YEAR
    WHERE
        DATA_TAB.BILL_NO      = V_BILL_NO
      AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
      AND DATA_TAB.CHECK_STATE = '1'
      AND DATA_TAB.DATA_STATE = '1'
      and DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP)
  union
  (
    select FARMER.AREA_CD from PT_DC_STAT_DATA_H DATA_TAB   --需要加的工的数据的行政，即新的行政
  LEFT JOIN R_FARMER_ALL FARMER ON FARMER.FARMER_ID = DATA_TAB.RELA_OBJECT_ID AND FARMER.BUSINESS_YEAR = DATA_TAB.PT_YEAR
    WHERE
        DATA_TAB.BILL_NO      = V_BILL_NO
      AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
      AND DATA_TAB.CHECK_STATE = '1'
      AND DATA_TAB.DATA_STATE = '1'
      and DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
  )
  union
  (
    select FM.ORG_CD from R_PT_DT_FM_D FM  --已加工过的数据的组织，即旧的组织
    where FM.DT_FM_D_ID in (
      select DATA_TAB.DATA_STORE_BASE_TBL_ID from PT_DC_STAT_DATA_H DATA_TAB
        WHERE
          DATA_TAB.BILL_NO      = V_BILL_NO
          AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
          AND DATA_TAB.CHECK_STATE = '1'
          AND DATA_TAB.DATA_STATE = '1'
          and DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
    )
  )
  union
  (
    select FM.AREA_CD from R_PT_DT_FM_D FM --已加工过的数据的行政，即旧的行政
    where FM.DT_FM_D_ID in (
      select DATA_TAB.DATA_STORE_BASE_TBL_ID from PT_DC_STAT_DATA_H DATA_TAB
        WHERE
          DATA_TAB.BILL_NO      = V_BILL_NO
          AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
          AND DATA_TAB.CHECK_STATE = '1'
          AND DATA_TAB.DATA_STATE = '1'
          and DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
    )
  )
  UNION
  (
    select FARMER.ORG_CD from PT_DC_STAT_DATA_A DATA_TAB   --需要加工的数据的组织，即新的组织
    LEFT JOIN R_FARMER_ALL FARMER ON FARMER.FARMER_ID = DATA_TAB.RELA_OBJECT_ID AND FARMER.BUSINESS_YEAR = DATA_TAB.PT_YEAR
    WHERE
        DATA_TAB.BILL_NO      = V_BILL_NO_61
      AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
      AND DATA_TAB.CHECK_STATE = '1'
      AND DATA_TAB.DATA_STATE = '1'
      and DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
  )
  UNION
  (
    select FARMER.AREA_CD from PT_DC_STAT_DATA_A DATA_TAB   --需要加的工的数据的行政，即新的行政
    LEFT JOIN R_FARMER_ALL FARMER ON FARMER.FARMER_ID = DATA_TAB.RELA_OBJECT_ID AND FARMER.BUSINESS_YEAR = DATA_TAB.PT_YEAR
    WHERE
      DATA_TAB.BILL_NO      = V_BILL_NO_61
      AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
      AND DATA_TAB.CHECK_STATE = '1'
      AND DATA_TAB.DATA_STATE = '1'
      and DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
  )
  union
  (
    select FM.ORG_CD from R_PT_DT_FM_D FM  --已加工过的数据的组织，即旧的组织
    where FM.DT_FM_D_ID in (
      select DATA_TAB.DATA_STORE_BASE_TBL_ID from PT_DC_STAT_DATA_A DATA_TAB
        WHERE
          DATA_TAB.BILL_NO      = V_BILL_NO_61
          AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
          AND DATA_TAB.CHECK_STATE = '1'
          AND DATA_TAB.DATA_STATE = '1'
          and DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
    )
  )
  union
  (
    select FM.AREA_CD from R_PT_DT_FM_D FM --已加工过的数据的行政，即旧的行政
    where FM.DT_FM_D_ID in (
      select DATA_TAB.DATA_STORE_BASE_TBL_ID from PT_DC_STAT_DATA_A DATA_TAB
        WHERE
            DATA_TAB.BILL_NO      = V_BILL_NO_61
          AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
          AND DATA_TAB.CHECK_STATE = '1'
          AND DATA_TAB.DATA_STATE = '1'
          and DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
    )
  )
  WITH UR;

  SET V_STEP = '4、本次需要加工的数据如果已存在，则删除';
  DELETE FROM
    R_PT_DT_FM_D T
  WHERE
    T.DT_FM_D_ID IN
    (
      SELECT
        DATA_TAB.DATA_STORE_BASE_TBL_ID AS DT_FM_D_ID
      FROM
        PT_DC_STAT_DATA_H DATA_TAB
      WHERE
        DATA_TAB.BILL_NO      = V_BILL_NO
        AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
        AND DATA_TAB.CHECK_STATE = '1'
        AND DATA_TAB.DATA_STATE = '1'
        AND DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
    )
    OR
    T.DT_FM_D_ID IN (
      SELECT
        DATA_TAB.DATA_STORE_BASE_TBL_ID AS DT_FM_D_ID
      FROM
        PT_DC_STAT_DATA_A DATA_TAB
      WHERE
        DATA_TAB.BILL_NO      = V_BILL_NO_61
      AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
      AND DATA_TAB.CHECK_STATE = '1'
      AND DATA_TAB.DATA_STATE = '1'
      AND DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
    )
  WITH UR;

  SET V_STEP = '5.1、写入本次需要加工的田间卫生数据';
  INSERT
  INTO
    R_PT_DT_FM_D
    (
      DT_FM_D_ID,
      FIELD_BLOCK_ID,
      FIELD_BLOCK_CD,
      FIELD_BLOCK_NAME,
      BUSINESS_YEAR,
      BUSINESS_DATE,
      UNCOVER_AREA,
      UNCOVER_ROOFED_AREA,
      BUTTON_POLE_AREA,
      BUTTON_POLE_ROOFED_AREA,
      DEBRIS_CLEAN_AREA,
      DEBRIS_CLEAN_ROOFED_AREA,
      FARMER_ID,
      FARMER_CD,
      FARMER_NAME,
      ORG_CD,
      ORG_NAME,
      PROV,
      PROV_NAME,
      CITC,
      CITC_NAME,
      COUC,
      COUC_NAME,
      STAC,
      STAC_NAME,
      SSTC,
      SSTC_NAME,
      AREA_CD,
      AREA_NAME,
      AREA_PROV,
      AREA_PROV_NAME,
      AREA_CITC,
      AREA_CITC_NAME,
      AREA_COUC,
      AREA_COUC_NAME,
      AREA_TOWN,
      TOWN_NAME,
      AREA_VAGE,
      VAGE_NAME,
      AREA_GRUP,
      GRUP_NAME,
      TECHNICIAN_ID,
      SEND_STATE,
      DATA_STATE,
      MODIFY_TIME,
      LAST_TIME
    )
  SELECT
    DATA_TAB.DATA_STORE_BASE_TBL_ID AS DT_FM_D_ID,
    DATA_TAB.CLT_OBJ_ID             AS FIELD_BLOCK_ID,
    DATA_TAB.CLT_OBJ_CD             AS FIELD_BLOCK_CD,
    DATA_TAB.CLT_OBJ_NAME           AS FIELD_BLOCK_NAME,
    DATA_TAB.PT_YEAR,
    DATA_TAB.FEEDBACK_DATE,
    CASE
      WHEN DATA_TAB.C1 IS NULL OR DATA_TAB.C1 = ''
      THEN 0
      ELSE DATA_TAB.N1
    END AS UNCOVER_AREA,
    CASE
      WHEN DATA_TAB.C1 ='1'
      THEN DATA_TAB.N1
      ELSE 0
    END AS UNCOVER_ROOFED_AREA,
    CASE
      WHEN DATA_TAB.C2 IS NULL OR DATA_TAB.C2 = ''
      THEN 0
      ELSE DATA_TAB.N1
    END AS BUTTON_POLE_AREA,
    CASE
      WHEN DATA_TAB.C2 ='1'
      THEN DATA_TAB.N1
      ELSE 0
    END AS BUTTON_POLE_ROOFED_AREA,
    CASE
      WHEN DATA_TAB.C3 IS NULL OR DATA_TAB.C3 = ''
      THEN 0
      ELSE DATA_TAB.N1
    END AS DEBRIS_CLEAN_AREA,
    CASE
      WHEN DATA_TAB.C3 ='1'
      THEN DATA_TAB.N1
      ELSE 0
    END AS DEBRIS_CLEAN_ROOFED_AREA,
    DATA_TAB.RELA_OBJECT_ID AS FARMER_ID,
    DATA_TAB.RELA_OBJECT_CD AS FARMER_CD,
    DATA_TAB.RELA_OBJECT_NAME FARMER_NAME,
    FARMER.ORG_CD,
    FARMER.ORG_NAME,
    FARMER.PROV,
    FARMER.PROV_NAME,
    FARMER.CITC,
    FARMER.CITC_NAME,
    FARMER.COUC,
    FARMER.COUC_NAME,
    FARMER.STAC,
    FARMER.STAC_NAME,
    FARMER.SSTC,
    FARMER.SSTC_NAME,
    FARMER.AREA_CD,
    FARMER.AREA_NAME,
    FARMER.AREA_PROV,
    FARMER.AREA_PROV_NAME,
    FARMER.AREA_CITC,
    FARMER.AREA_CITC_NAME,
    FARMER.AREA_COUC,
    FARMER.AREA_COUC_NAME,
    FARMER.AREA_TOWN,
    FARMER.TOWN_NAME,
    FARMER.AREA_VAGE,
    FARMER.VAGE_NAME,
    FARMER.AREA_GRUP,
    FARMER.GRUP_NAME,
    DATA_TAB.FEEDBACK_PSN_ID,
    '0',
    '1',
    DATA_TAB.MODIFY_TIME,
    V_TIMESTAMP_CURRENT
  FROM
    PT_DC_STAT_DATA_H DATA_TAB
  LEFT JOIN R_FARMER_ALL FARMER ON FARMER.FARMER_ID = DATA_TAB.RELA_OBJECT_ID AND FARMER.BUSINESS_YEAR = DATA_TAB.PT_YEAR
  WHERE
    DATA_TAB.BILL_NO      = V_BILL_NO
    AND DATA_TAB.DATA_STATE = '1'
    AND DATA_TAB.CHECK_STATE = '1'
    AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
    AND DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
  WITH UR;

  SET V_STEP = '5.2、写入本次需要加工的大田管理数据';
  INSERT
  INTO
    R_PT_DT_FM_D
    (
      DT_FM_D_ID,
      FIELD_BLOCK_ID,
      FIELD_BLOCK_CD,
      FIELD_BLOCK_NAME,
      BUSINESS_YEAR,
      BUSINESS_DATE,
      MANURE_AREA,
      MANURE_ROOFED_AREA,
      PTSX_AREA,
      PTSX_ROOFED_AREA,
      PREVENT_AREA,
      PREVENT_ROOFED_AREA,
      FARMER_ID,
      FARMER_CD,
      FARMER_NAME,
      ORG_CD,
      ORG_NAME,
      PROV,
      PROV_NAME,
      CITC,
      CITC_NAME,
      COUC,
      COUC_NAME,
      STAC,
      STAC_NAME,
      SSTC,
      SSTC_NAME,
      AREA_CD,
      AREA_NAME,
      AREA_PROV,
      AREA_PROV_NAME,
      AREA_CITC,
      AREA_CITC_NAME,
      AREA_COUC,
      AREA_COUC_NAME,
      AREA_TOWN,
      TOWN_NAME,
      AREA_VAGE,
      VAGE_NAME,
      AREA_GRUP,
      GRUP_NAME,
      TECHNICIAN_ID,
      SEND_STATE,
      DATA_STATE,
      MODIFY_TIME,
      LAST_TIME
    )
  SELECT
    DATA_TAB.DATA_STORE_BASE_TBL_ID AS DT_FM_D_ID,
    DATA_TAB.CLT_OBJ_ID             AS FIELD_BLOCK_ID,
    DATA_TAB.CLT_OBJ_CD             AS FIELD_BLOCK_CD,
    DATA_TAB.CLT_OBJ_NAME           AS FIELD_BLOCK_NAME,
    DATA_TAB.PT_YEAR,
    DATA_TAB.FEEDBACK_DATE,
    CASE
      WHEN DATA_TAB.C1 IS NULL OR DATA_TAB.C1 = ''
      THEN 0
      ELSE DATA_TAB.N1
    END AS MANURE_AREA,
    CASE
      WHEN DATA_TAB.C1 ='1'
      THEN DATA_TAB.N1
      ELSE 0
    END AS MANURE_ROOFED_AREA,
    CASE
      WHEN DATA_TAB.C2 IS NULL OR DATA_TAB.C2 = ''
      THEN 0
      ELSE DATA_TAB.N1
    END AS PTSX_AREA,
    CASE
      WHEN DATA_TAB.C2 ='1'
      THEN DATA_TAB.N1
      ELSE 0
    END AS PTSX_ROOFED_AREA,
    CASE
      WHEN DATA_TAB.C4 IS NULL OR DATA_TAB.C4 = ''
      THEN 0
      ELSE DATA_TAB.N1
    END AS PREVENT_AREA,
    CASE
      WHEN DATA_TAB.C4 ='1'
      THEN DATA_TAB.N1
      ELSE 0
    END AS PREVENT_ROOFED_AREA,
    DATA_TAB.RELA_OBJECT_ID AS FARMER_ID,
    DATA_TAB.RELA_OBJECT_CD AS FARMER_CD,
    DATA_TAB.RELA_OBJECT_NAME FARMER_NAME,
    FARMER.ORG_CD,
    FARMER.ORG_NAME,
    FARMER.PROV,
    FARMER.PROV_NAME,
    FARMER.CITC,
    FARMER.CITC_NAME,
    FARMER.COUC,
    FARMER.COUC_NAME,
    FARMER.STAC,
    FARMER.STAC_NAME,
    FARMER.SSTC,
    FARMER.SSTC_NAME,
    FARMER.AREA_CD,
    FARMER.AREA_NAME,
    FARMER.AREA_PROV,
    FARMER.AREA_PROV_NAME,
    FARMER.AREA_CITC,
    FARMER.AREA_CITC_NAME,
    FARMER.AREA_COUC,
    FARMER.AREA_COUC_NAME,
    FARMER.AREA_TOWN,
    FARMER.TOWN_NAME,
    FARMER.AREA_VAGE,
    FARMER.VAGE_NAME,
    FARMER.AREA_GRUP,
    FARMER.GRUP_NAME,
    DATA_TAB.FEEDBACK_PSN_ID,
    '0',
    '1',
    DATA_TAB.MODIFY_TIME,
    V_TIMESTAMP_CURRENT
  FROM
    PT_DC_STAT_DATA_A DATA_TAB
  LEFT JOIN R_FARMER_ALL FARMER ON FARMER.FARMER_ID = DATA_TAB.RELA_OBJECT_ID AND FARMER.BUSINESS_YEAR = DATA_TAB.PT_YEAR
  WHERE
    DATA_TAB.BILL_NO      = V_BILL_NO_61
    AND DATA_TAB.DATA_STATE = '1'
    AND DATA_TAB.CHECK_STATE = '1'
    AND DATA_TAB.PT_YEAR    >= V_PT_YEAR
    AND DATA_TAB.MODIFY_TIME  > V_TIMESTAMP_STOP
  WITH UR;

  SET V_STEP = '6、本次有修改的数据，涉及到的行政单位，从组织表中删除对应的数据';
  DELETE
  FROM
    R_PT_DT_DV_D T
  WHERE
    T.BUSINESS_YEAR >= V_PT_YEAR
  AND DATA_STATE    = '1'
  AND T.AREA_CD    IN
    (
      SELECT DISTINCT
        SESSION.ORG_TEMP.ORG_CD
      FROM
        SESSION.ORG_TEMP
    );

  SET V_STEP = '7、重新统计本次有修改的数据，所涉及到的行政';
  INSERT
	INTO
	  R_PT_DT_DV_D
	  (
      DT_DV_D_ID,
      BUSINESS_YEAR,
      BUSINESS_DATE,
      UNCOVER_AREA,
      UNCOVER_ROOFED_AREA,
      BUTTON_POLE_AREA,
      BUTTON_POLE_ROOFED_AREA,
      DEBRIS_CLEAN_AREA,
      DEBRIS_CLEAN_ROOFED_AREA,
      MANURE_AREA,
      MANURE_ROOFED_AREA,
      PTSX_AREA,
      PTSX_ROOFED_AREA,
      PREVENT_AREA,
      PREVENT_ROOFED_AREA,
      ORG_CD,
      ORG_NAME,
      PROV,
      PROV_NAME,
      CITC,
      CITC_NAME,
      COUC,
      COUC_NAME,
      STAC,
      STAC_NAME,
      SSTC,
      SSTC_NAME,
      AREA_CD,
      AREA_NAME,
      AREA_PROV,
      AREA_PROV_NAME,
      AREA_CITC,
      AREA_CITC_NAME,
      AREA_COUC,
      AREA_COUC_NAME,
      AREA_TOWN,
      TOWN_NAME,
      AREA_VAGE,
      VAGE_NAME,
      AREA_GRUP,
      GRUP_NAME,
      SEND_STATE,
      DATA_STATE,
      MODIFY_TIME,
      LAST_TIME
	  )
	SELECT
	  HEX(RAND()) ||HEX(RAND()) AS DT_DV_D_ID,
    BUSINESS_YEAR,
    MAX(BUSINESS_DATE),
    SUM(UNCOVER_AREA),
    SUM(UNCOVER_ROOFED_AREA),
    SUM(BUTTON_POLE_AREA),
    SUM(BUTTON_POLE_ROOFED_AREA),
    SUM(DEBRIS_CLEAN_AREA),
    SUM(DEBRIS_CLEAN_ROOFED_AREA),
    SUM(MANURE_AREA),
    SUM(MANURE_ROOFED_AREA),
    SUM(PTSX_AREA),
    SUM(PTSX_ROOFED_AREA),
    SUM(PREVENT_AREA),
    SUM(PREVENT_ROOFED_AREA),
	  ORG_CD,
	  ORG_NAME,
	  PROV,
	  PROV_NAME,
	  CITC,
	  CITC_NAME,
	  COUC,
	  COUC_NAME,
	  STAC,
	  STAC_NAME,
	  SSTC,
	  SSTC_NAME,
	  AREA_CD,
	  AREA_NAME,
	  AREA_PROV,
	  AREA_PROV_NAME,
	  AREA_CITC,
	  AREA_CITC_NAME,
	  AREA_COUC,
	  AREA_COUC_NAME,
	  AREA_TOWN,
	  TOWN_NAME,
	  AREA_VAGE,
	  VAGE_NAME,
	  AREA_GRUP,
	  GRUP_NAME,
    '0',
    '1',
    MAX(MODIFY_TIME),
    V_TIMESTAMP_CURRENT
	FROM
	  R_PT_DT_FM_D T
  WHERE
    T.BUSINESS_YEAR >= V_PT_YEAR
    AND T.AREA_CD IN
    (
      SELECT DISTINCT
        SESSION.ORG_TEMP.ORG_CD
      FROM
        SESSION.ORG_TEMP
    )
  GROUP BY
	  T.BUSINESS_YEAR,
	  T.ORG_CD,
	  T.ORG_NAME,
	  T.PROV,
	  T.PROV_NAME,
	  T.CITC,
	  T.CITC_NAME,
	  T.COUC,
	  T.COUC_NAME,
	  T.STAC,
	  T.STAC_NAME,
	  T.SSTC,
	  T.SSTC_NAME,
	  T.AREA_CD,
	  T.AREA_NAME,
	  T.AREA_PROV,
	  T.AREA_PROV_NAME,
	  T.AREA_CITC,
	  T.AREA_CITC_NAME,
	  T.AREA_COUC,
	  T.AREA_COUC_NAME,
	  T.AREA_TOWN,
	  T.TOWN_NAME,
	  T.AREA_VAGE,
	  T.VAGE_NAME,
	  T.AREA_GRUP,
	  T.GRUP_NAME
  WITH UR;

  SET V_STEP = '8、本次有修改的数据，涉及到的组织，从组织表中删除对应的数据';
  DELETE FROM
    R_PT_DT_CB_D T
  WHERE
    T.BUSINESS_YEAR >= V_PT_YEAR
  AND ORG_CD       IN
    (
      SELECT DISTINCT
        SESSION.ORG_TEMP.ORG_CD
      FROM
        SESSION.ORG_TEMP
    );

  SET V_STEP = '9、重新统计本次有修改的数据，所涉及到的组织';
  INSERT
	INTO
	  R_PT_DT_CB_D
	  (
      DT_CB_D_ID,
      BUSINESS_YEAR,
      BUSINESS_DATE,
      UNCOVER_AREA,
      UNCOVER_ROOFED_AREA,
      BUTTON_POLE_AREA,
      BUTTON_POLE_ROOFED_AREA,
      DEBRIS_CLEAN_AREA,
      DEBRIS_CLEAN_ROOFED_AREA,
      MANURE_AREA,
      MANURE_ROOFED_AREA,
      PTSX_AREA,
      PTSX_ROOFED_AREA,
      PREVENT_AREA,
      PREVENT_ROOFED_AREA,
      ORG_CD,
      ORG_NAME,
      PROV,
      PROV_NAME,
      CITC,
      CITC_NAME,
      COUC,
      COUC_NAME,
      STAC,
      STAC_NAME,
      SSTC,
      SSTC_NAME,
      SEND_STATE,
      DATA_STATE,
      MODIFY_TIME,
      LAST_TIME
	  )
	SELECT
	  HEX(RAND()) || HEX(RAND()) AS DT_CB_D_ID,
	  BUSINESS_YEAR,
    MAX(BUSINESS_DATE),
    SUM(UNCOVER_AREA),
    SUM(UNCOVER_ROOFED_AREA),
    SUM(BUTTON_POLE_AREA),
    SUM(BUTTON_POLE_ROOFED_AREA),
    SUM(DEBRIS_CLEAN_AREA),
    SUM(DEBRIS_CLEAN_ROOFED_AREA),
    SUM(MANURE_AREA),
    SUM(MANURE_ROOFED_AREA),
    SUM(PTSX_AREA),
    SUM(PTSX_ROOFED_AREA),
    SUM(PREVENT_AREA),
    SUM(PREVENT_ROOFED_AREA),
	  ORG_CD,
	  ORG_NAME,
	  PROV,
	  PROV_NAME,
	  CITC,
	  CITC_NAME,
	  COUC,
	  COUC_NAME,
	  STAC,
	  STAC_NAME,
	  SSTC,
	  SSTC_NAME,
    '0',
    '1',
    MAX(MODIFY_TIME),
    V_TIMESTAMP_CURRENT
	FROM
	  R_PT_DT_DV_D T
  WHERE
    T.BUSINESS_YEAR >= V_PT_YEAR
    AND T.ORG_CD IN
    (
      SELECT DISTINCT
        SESSION.ORG_TEMP.ORG_CD
      FROM
        SESSION.ORG_TEMP
    )
  GROUP BY
	  T.BUSINESS_YEAR,
	  T.ORG_CD,
	  T.ORG_NAME,
	  T.PROV,
	  T.PROV_NAME,
	  T.CITC,
	  T.CITC_NAME,
	  T.COUC,
	  T.COUC_NAME,
	  T.STAC,
	  T.STAC_NAME,
	  T.SSTC,
	  T.SSTC_NAME
  WITH UR;

	COMMIT;

  SET V_STEP = '10、更新存储过程执行时间';
  UPDATE DCCELL.DC_PROC_TIME_STOP SET TIME_STOP = V_TIMESTAMP_CURRENT  WHERE PROC_NAME=D_PROC_NAME;

  COMMIT;
END
@